{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geomorphproject1","text":"<p>Python Package to Study and Analyze Urban Morphology.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://amccorketutoring.github.io/geomorphproject1</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Interactive maps to analyze urban development</li> </ul>"},{"location":"#usage","title":"Usage","text":"<pre><code>import geomorphproject1\nimport os\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geomorphproject1.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>geomorphproject1/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/amccorketutoring/geomorphproject1/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>GeoMorphProject1 could always use more documentation, whether as part of the official GeoMorphProject1 docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/amccorketutoring/geomorphproject1/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geomorphproject1 for local development.</p> <ol> <li> <p>Fork the geomorphproject1 repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geomorphproject1.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geomorphproject1\n$ cd geomorphproject1/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geomorphproject1 tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/amccorketutoring/geomorphproject1/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"geomorphproject1/","title":"geomorphproject1 module","text":"<p>Main module.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install GeoMorphProject1, run this command in your terminal:</p> <pre><code>pip install geomorphproject1\n</code></pre> <p>This is the preferred method to install GeoMorphProject1, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install GeoMorphProject1 from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/amccorketutoring/geomorphproject1\n</code></pre>"},{"location":"ipyleaflet_map_lab8/","title":"geomorphproject1/ipyleaflet_map_lab8.py","text":""},{"location":"ipyleaflet_map_lab8/#-","title":"-------------------------------------------------","text":""},{"location":"ipyleaflet_map_lab8/#this-module-defines-customleafletmap-specifically-for-lab-8","title":"This module defines CustomLeafletMap specifically for Lab 8.","text":""},{"location":"ipyleaflet_map_lab8/#it-provides-ui-widgets-a-dropdown-to-switch-basemaps-and-a-toggle-button","title":"It provides UI widgets: a dropdown to switch basemaps and a toggle button.","text":"<p>from ipyleaflet import Map, basemaps, LayersControl, WidgetControl from ipywidgets import Dropdown, Button</p> <p>class CustomLeafletMap(Map):     \"\"\"     Interactive map with UI widgets for switching basemaps using a dropdown,     and a toggle button to hide the dropdown. Lab 8 specific.     \"\"\"</p> <pre><code>def __init__(self, center=(20, 0), zoom=2, **kwargs):\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self._dropdown_widget = None\n    self._close_button = None\n    self.add_control(LayersControl())\n\ndef add_basemap(self, name=\"OpenStreetMap\"):\n    self.clear_layers()\n    selected = name.split(\".\")\n    tile = basemaps\n    for part in selected:\n        tile = getattr(tile, part) if hasattr(tile, part) else tile[part]\n    self.add_layer(tile)\n\ndef add_basemap_dropdown(self, position=\"topright\"):\n    \"\"\"\n    Adds an interactive dropdown menu to switch basemaps.\n\n    Params:\n        position (str): Position of the dropdown on the map.\n\n    Returns:\n        None\n    \"\"\"\n    dropdown = Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"CartoDB.DarkMatter\"\n        ],\n        value=\"OpenStreetMap\",\n        description=\"Basemap:\"\n    )\n\n    def on_change(change):\n        if change[\"name\"] == \"value\":\n            self.add_basemap(change[\"new\"])\n\n    dropdown.observe(on_change)\n    self._dropdown_widget = WidgetControl(widget=dropdown, position=position)\n    self.add_control(self._dropdown_widget)\n\ndef add_dropdown_toggle_button(self, position=\"topright\"):\n    \"\"\"\n    Adds a button to hide the basemap dropdown.\n\n    Params:\n        position (str): Position of the button on the map.\n\n    Returns:\n        None\n    \"\"\"\n    button = Button(description=\"Hide Dropdown\", layout={\"width\": \"150px\"})\n\n    def on_click(b):\n        if self._dropdown_widget:\n            self.remove_control(self._dropdown_widget)\n            self._dropdown_widget = None\n\n    button.on_click(on_click)\n    self._close_button = WidgetControl(widget=button, position=position)\n    self.add_control(self._close_button)\n</code></pre>"},{"location":"myfoliumcode/","title":"folium (cover lab 6 and 7) module","text":"<p>import folium import geopandas as gpd from folium.raster_layers import TileLayer, ImageOverlay, VideoOverlay, WmsTileLayer</p> <p>class CustomFoliumMap(folium.Map):     \"\"\"     Interactive map using folium with support for basemaps, vector data,     raster imagery, image/video overlays, and WMS layers.     \"\"\"</p> <pre><code>def __init__(self, location=(20, 0), zoom_start=2, **kwargs):\n    super().__init__(location=location, zoom_start=zoom_start, **kwargs)\n\ndef add_basemap(self, tiles=\"OpenStreetMap\", attr=None):\n    folium.TileLayer(tiles=tiles, attr=attr or tiles).add_to(self)\n\ndef add_layer_control(self):\n    folium.LayerControl().add_to(self)\n\ndef add_vector(self, filepath):\n    gdf = gpd.read_file(filepath)\n    folium.GeoJson(gdf, name=\"Vector Layer\").add_to(self)\n\ndef add_raster(self, url, name=None, colormap=None, opacity=1.0, attr=None):\n    TileLayer(\n        tiles=url,\n        name=name or \"Raster\",\n        opacity=opacity,\n        attr=attr or \"Attribution Required\",\n    ).add_to(self)\n\ndef add_image(self, url, bounds, opacity=1.0):\n    ImageOverlay(image=url, bounds=bounds, opacity=opacity, name=\"Image\").add_to(\n        self\n    )\n\ndef add_video(self, url, bounds, opacity=1.0):\n    VideoOverlay(\n        video_url=url, bounds=bounds, opacity=opacity, name=\"Video\"\n    ).add_to(self)\n\ndef add_wms_layer(self, url, layers, name, format=\"image/png\", transparent=True):\n    WmsTileLayer(\n        url=url, layers=layers, name=name, fmt=format, transparent=transparent\n    ).add_to(self)\n</code></pre>"},{"location":"myipyleafletcode/","title":"ipyleaflet (cover lab 6 and 7) module","text":"<p>from ipyleaflet import (     Map as LeafletMap,     basemaps,     LayersControl,     GeoJSON,     TileLayer,     ImageOverlay,     VideoOverlay,     WMSLayer, ) import geopandas as gpd import json</p> <p>class CustomLeafletMap(LeafletMap):     \"\"\"     Interactive map using ipyleaflet with support for basemaps, vector data,     raster imagery, image/video overlays, and WMS layers.     \"\"\"</p> <pre><code>def __init__(self, center=(20, 0), zoom=2, **kwargs):\n    super().__init__(center=center, zoom=zoom, **kwargs)\n\ndef add_basemap(self, name=\"OpenStreetMap\"):\n    parts = name.split(\".\")\n    result = basemaps\n    for part in parts:\n        result = result.get(part)\n        if result is None:\n            raise ValueError(f\"Invalid basemap: {name}\")\n    self.add_layer(result)\n\ndef add_layer_control(self):\n    self.add_control(LayersControl())\n\ndef add_vector(self, filepath):\n    gdf = gpd.read_file(filepath)\n    geo_json = json.loads(gdf.to_json())\n    layer = GeoJSON(data=geo_json)\n    self.add_layer(layer)\n\ndef add_raster(self, url, name=None, colormap=None, opacity=1.0):\n    \"\"\"Add a raster tile layer (COG or XYZ).\"\"\"\n    tile_layer = TileLayer(url=url, name=name or \"Raster\", opacity=opacity)\n    self.add_layer(tile_layer)\n\ndef add_image(self, url, bounds, opacity=1.0):\n    \"\"\"Add a static image overlay.\"\"\"\n    img_layer = ImageOverlay(url=url, bounds=bounds, opacity=opacity)\n    self.add_layer(img_layer)\n\ndef add_video(self, url, bounds, opacity=1.0):\n    \"\"\"Add a video overlay.\"\"\"\n    video_layer = VideoOverlay(url=url, bounds=bounds, opacity=opacity)\n    self.add_layer(video_layer)\n\ndef add_wms_layer(self, url, layers, name, format=\"image/png\", transparent=True):\n    \"\"\"Add a WMS tile layer.\"\"\"\n    wms_layer = WMSLayer(\n        url=url, layers=layers, name=name, format=format, transparent=transparent\n    )\n    self.add_layer(wms_layer)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use GeoMorphProject1 in a project:</p> <pre><code>import geomorphproject1\n</code></pre>"},{"location":"examples/folium_example/","title":"Folium example","text":"In\u00a0[1]: Copied! <pre>from geomorphproject1.folium_map import CustomFoliumMap\n\nimport folium\nimport geopandas as gpd\nfrom folium.raster_layers import TileLayer, ImageOverlay, VideoOverlay, WmsTileLayer\n\nfrom geomorphproject1.folium_map import CustomFoliumMap\n\nm = CustomFoliumMap(location=(35.96, -83.92), zoom_start=10)\n</pre> from geomorphproject1.folium_map import CustomFoliumMap  import folium import geopandas as gpd from folium.raster_layers import TileLayer, ImageOverlay, VideoOverlay, WmsTileLayer  from geomorphproject1.folium_map import CustomFoliumMap  m = CustomFoliumMap(location=(35.96, -83.92), zoom_start=10) In\u00a0[2]: Copied! <pre>tile_url = \"https://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/tile/{z}/{y}/{x}\"\nm.add_raster(\n    tile_url, name=\"USGS Shaded Relief\", opacity=0.8, attr=\"USGS The National Map\"\n)\nm.save(\"USGS_Shaded_Relief.html\")\n</pre> tile_url = \"https://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/tile/{z}/{y}/{x}\" m.add_raster(     tile_url, name=\"USGS Shaded Relief\", opacity=0.8, attr=\"USGS The National Map\" ) m.save(\"USGS_Shaded_Relief.html\") In\u00a0[3]: Copied! <pre># Add a video overlay\nvideo_url = \"https://rammb.cira.colostate.edu/ramsdis/online/loop_of_the_day/images/loop_of_the_day/goes-16/20200303000000/video/20200303000000_tnstorms.mp4\"\nvideo_bounds = [[34, -91], [37, -81]]\nm.add_video(video_url, bounds=video_bounds, opacity=0.7)\nm.save(\"folium_video_overlay.html\")\n</pre> # Add a video overlay video_url = \"https://rammb.cira.colostate.edu/ramsdis/online/loop_of_the_day/images/loop_of_the_day/goes-16/20200303000000/video/20200303000000_tnstorms.mp4\" video_bounds = [[34, -91], [37, -81]] m.add_video(video_url, bounds=video_bounds, opacity=0.7) m.save(\"folium_video_overlay.html\") In\u00a0[4]: Copied! <pre># Add a WMS layer\nwms_url = \"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi\"\nm.add_wms_layer(\n    url=wms_url,\n    layers=\"nexrad-n0r-900913\",\n    name=\"NEXRAD Radar\",\n    format=\"image/png\",\n    transparent=True,\n)\nm.save(\"folium_wms_layer.html\")\n</pre> # Add a WMS layer wms_url = \"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi\" m.add_wms_layer(     url=wms_url,     layers=\"nexrad-n0r-900913\",     name=\"NEXRAD Radar\",     format=\"image/png\",     transparent=True, ) m.save(\"folium_wms_layer.html\") In\u00a0[5]: Copied! <pre>import folium\n\nfolium.LayerControl().add_to(m)\n\n# Optional: Save or render\nm.save(\"folium_layers.html\")\nm\n</pre> import folium  folium.LayerControl().add_to(m)  # Optional: Save or render m.save(\"folium_layers.html\") m Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"},{"location":"examples/ipyleaflet_Lab8_demo/","title":"ipyleaflet Lab8 demo","text":"In\u00a0[1]: Copied! <pre>import sys\n\nsys.path.append(\"C:/Users/Alex/Documents/GeoMorphProject1\")  # use forward slashes\n</pre> import sys  sys.path.append(\"C:/Users/Alex/Documents/GeoMorphProject1\")  # use forward slashes In\u00a0[2]: Copied! <pre># Uncomment the line below if running in Google Colab\n# !pip install ipyleaflet geopandas\n</pre> # Uncomment the line below if running in Google Colab # !pip install ipyleaflet geopandas In\u00a0[3]: Copied! <pre>from geomorphproject1.ipyleaflet_map_lab8 import CustomLeafletMap\n</pre> from geomorphproject1.ipyleaflet_map_lab8 import CustomLeafletMap In\u00a0[4]: Copied! <pre>leaf_map = CustomLeafletMap(center=(35.96, -83.92), zoom=10)\nleaf_map\n</pre> leaf_map = CustomLeafletMap(center=(35.96, -83.92), zoom=10) leaf_map Out[4]: In\u00a0[5]: Copied! <pre>leaf_map.add_basemap_dropdown(position=\"topright\")\n</pre> leaf_map.add_basemap_dropdown(position=\"topright\") In\u00a0[6]: Copied! <pre>leaf_map.add_dropdown_toggle_button(position=\"topright\")\n</pre> leaf_map.add_dropdown_toggle_button(position=\"topright\")"},{"location":"examples/ipyleaflet_example/","title":"Ipyleaflet example","text":"In\u00a0[1]: Copied! <pre>from geomorphproject1.ipyleaflet_map import CustomLeafletMap\n\nleaf_map = CustomLeafletMap(center=(35.96, -83.92), zoom=10)\nleaf_map.add_basemap(\"Esri.WorldImagery\")\nleaf_map.add_layer_control()\nleaf_map.add_vector(\"data/us_states.geojson\")\nleaf_map\n</pre> from geomorphproject1.ipyleaflet_map import CustomLeafletMap  leaf_map = CustomLeafletMap(center=(35.96, -83.92), zoom=10) leaf_map.add_basemap(\"Esri.WorldImagery\") leaf_map.add_layer_control() leaf_map.add_vector(\"data/us_states.geojson\") leaf_map Out[1]: In\u00a0[2]: Copied! <pre># Add raster tile layer\ntile_url = \"https://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/tile/{z}/{y}/{x}\"\nleaf_map.add_raster(tile_url, name=\"Smooth Raster\", opacity=0.7)\nleaf_map\n</pre> # Add raster tile layer tile_url = \"https://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/tile/{z}/{y}/{x}\" leaf_map.add_raster(tile_url, name=\"Smooth Raster\", opacity=0.7) leaf_map Out[2]: In\u00a0[3]: Copied! <pre># Add a static image overlay\nimage_url = \"https://cdn.star.nesdis.noaa.gov/GOES16/ABI/SECTOR/SE/GEOCOLOR/GOES16-SE-GEOCOLOR-1000x1000.jpg\"\nimage_bounds = ((13, -130), (32, -100))  # ((south, west), (north, east))\nleaf_map.add_image(image_url, bounds=image_bounds, opacity=0.8)\nleaf_map\n</pre> # Add a static image overlay image_url = \"https://cdn.star.nesdis.noaa.gov/GOES16/ABI/SECTOR/SE/GEOCOLOR/GOES16-SE-GEOCOLOR-1000x1000.jpg\" image_bounds = ((13, -130), (32, -100))  # ((south, west), (north, east)) leaf_map.add_image(image_url, bounds=image_bounds, opacity=0.8) leaf_map Out[3]: In\u00a0[4]: Copied! <pre># Add a video overlay\nvideo_url = \"https://rammb.cira.colostate.edu/ramsdis/online/loop_of_the_day/images/loop_of_the_day/goes-16/20200303000000/video/20200303000000_tnstorms.mp4\"\nvideo_bounds = ((13, -130), (32, -100))\nleaf_map.add_video(video_url, bounds=video_bounds, opacity=0.7)\nleaf_map\n</pre> # Add a video overlay video_url = \"https://rammb.cira.colostate.edu/ramsdis/online/loop_of_the_day/images/loop_of_the_day/goes-16/20200303000000/video/20200303000000_tnstorms.mp4\" video_bounds = ((13, -130), (32, -100)) leaf_map.add_video(video_url, bounds=video_bounds, opacity=0.7) leaf_map Out[4]: In\u00a0[5]: Copied! <pre>wms_url = \"https://neo.gsfc.nasa.gov/wms/wms\"\nleaf_map.add_wms_layer(\n    url=wms_url,\n    layers=\"BlueMarbleNG\",\n    name=\"NASA Blue Marble\",\n    format=\"image/png\",\n    transparent=True,\n)\n\nleaf_map\n</pre> wms_url = \"https://neo.gsfc.nasa.gov/wms/wms\" leaf_map.add_wms_layer(     url=wms_url,     layers=\"BlueMarbleNG\",     name=\"NASA Blue Marble\",     format=\"image/png\",     transparent=True, )  leaf_map Out[5]:"},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>import geomorphproject1\n</pre> import geomorphproject1 In\u00a0[2]: Copied! <pre>from geomorphproject1.common import hello_world\n</pre> from geomorphproject1.common import hello_world In\u00a0[3]: Copied! <pre>hello_world()\n</pre> hello_world() <pre>Hello World!\n</pre>"},{"location":"examples/map/#create-interactive-maps","title":"Create interactive maps\u00b6","text":""}]}